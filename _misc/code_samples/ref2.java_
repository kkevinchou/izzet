// Using lists since they can be cleared, and will not need
// reallocation of size until it grows bigger than it ever
// was during the game execution. End position is added twice (left and right). Note
// That the first two and last two elements of the portals list are NOT valid mesh vertices.
// Portals format: for a portal i
//     portal[i] = left side
//     portal[i+1] = right side
//
// This algorithm is basically the Simple Stupid Funnel Algorithm posted by
// Mikko in the Digesting Duck blog.
static public void 
Funnel(List<HalfEdgeVertex> portals, ref List<Apex> contactVertices) {
    HalfEdgeVertex portalApex = portals[0];
    HalfEdgeVertex portalLeft = portals[0];
    HalfEdgeVertex portalRight = portals[1];
    
    int portalLeftIndex = 0;
    int portalRightIndex = 0;
    
    // Put the first point into the contact list
    Apex startApex = new Apex();
    startApex.vertex = portalApex;
    startApex.type = ApexTypes.Point;
    
    contactVertices.Clear();
    contactVertices.Add(startApex);

    Vector2 previousValidLSegment = Vector2.zero;
    Vector2 previousValidRSegment = Vector2.zero;
    
    for(int i = 2; i < portals.Count; i += 2) {
        HalfEdgeVertex left = portals[i];
        HalfEdgeVertex right = portals[i+1];
        
        Vector2 currentLSegment = left.position - portalApex.position;
        Vector2 currentRSegment = right.position - portalApex.position;
        
        // Left Side
        // Does new 'left' reduce the funnel?
        if(MyMath2D.CrossProduct2D(previousValidLSegment, currentLSegment) < MyMath2D.tolerance) {
            // Does it NOT cross the right side?
            // Is the apex the same as portal left? (if true, no chance but to move)
            if(
                portalApex == portalLeft ||
                MyMath2D.CrossProduct2D(previousValidRSegment, currentLSegment) > -MyMath2D.tolerance
            ) {
                portalLeft = left;
                previousValidLSegment = currentLSegment;
                portalLeftIndex = i;
            } else {
                // Collapse
                portalApex = portalRight;
                portalLeft = portalApex;
                
                Apex apex = new Apex();
                apex.vertex = portalApex;
                apex.type = ApexTypes.Right;
                contactVertices.Add(apex);
                
                portalLeftIndex = portalRightIndex;
                i = portalRightIndex;
                
                previousValidLSegment = Vector2.zero;
                previousValidRSegment = Vector2.zero;
                
                continue;
            }
        }
        
        //Right side
        // Does new 'right' reduce the funnel?
        if(MyMath2D.CrossProduct2D(previousValidRSegment, currentRSegment) > -MyMath2D.tolerance) {
            // Does it NOT cross the left side?
            // Is the apex the same as portal right? (if true, no chance but to move)
            if(
                portalApex == portalRight ||
                MyMath2D.CrossProduct2D(previousValidLSegment, currentRSegment) < MyMath2D.tolerance
            ) {
                portalRight = right;
                previousValidRSegment = currentRSegment;
                portalRightIndex = i;
            } else {
                // Collapse
                portalApex = portalLeft;
                portalRight = portalApex;
                
                Apex apex = new Apex();
                apex.vertex = portalApex;
                apex.type = ApexTypes.Left;
                contactVertices.Add(apex);
                
                portalRightIndex = portalLeftIndex;
                i = portalLeftIndex;
                
                previousValidLSegment = Vector2.zero;
                previousValidRSegment = Vector2.zero;
                
                continue;
            }
        }
    }
    
    // Put the first point into the contact list
    Apex endApex = new Apex();
    endApex.vertex = portals[portals.Count - 1];
    endApex.type = ApexTypes.Point;
    contactVertices.Add(endApex);
}
